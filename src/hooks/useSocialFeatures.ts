import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from './useAuth';
import { toast } from '@/hooks/use-toast';

export interface SocialPost {
  id: string;
  user_id: string;
  content: string;
  image_url?: string;
  likes_count: number;
  comments_count: number;
  achievement_id?: string;
  created_at: string;
  user_profile?: {
    display_name: string;
    avatar_url?: string;
  };
}

export interface SocialComment {
  id: string;
  post_id: string;
  user_id: string;
  content: string;
  created_at: string;
  user_profile?: {
    display_name: string;
    avatar_url?: string;
  };
}

export const useSocialFeatures = () => {
  const [posts, setPosts] = useState<SocialPost[]>([]);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  useEffect(() => {
    loadSocialFeed();
  }, []);

  const loadSocialFeed = async () => {
    try {
      // Social posts feature is disabled
      setPosts([]);
      setLoading(false);
      return;
    } catch (err) {
      console.error('Error in loadSocialFeed:', err);
      setLoading(false);
    }
  };

  const createPost = async (content: string, imageUrl?: string, achievementId?: string) => {
    if (!user) return;

    try {
      // Social posts creation is disabled
      return;
    } catch (err) {
      console.error('Error in createPost:', err);
    }
  };

  const likePost = async (postId: string) => {
    if (!user) return;

    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤
      console.log('Social post likes disabled - table does not exist');
      return;
    } catch (err) {
      console.error('Error in likePost:', err);
    }
  };

  const shareAchievement = async (achievementId: string, message: string) => {
    return createPost(message, undefined, achievementId);
  };

  const generateShareableContent = (type: 'achievement' | 'progress' | 'booking') => {
    const baseUrl = window.location.origin;
    
    switch (type) {
      case 'achievement':
        return {
          text: 'üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ ODE Food Hall! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é!',
          url: `${baseUrl}/taste-alley`,
          hashtags: ['ODEFoodHall', 'TasteAlley', 'Achievement']
        };
      case 'progress':
        return {
          text: 'üçΩÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ Taste Alley - –∏—Å—Å–ª–µ–¥—É—é –Ω–æ–≤—ã–µ –≤–∫—É—Å—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!',
          url: `${baseUrl}/taste-alley`,
          hashtags: ['ODEFoodHall', 'Progress', 'Foodie']
        };
      case 'booking':
        return {
          text: 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –º–µ—Å—Ç–æ –≤ ODE Food Hall! –ù–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø—ã—Ç–∞!',
          url: baseUrl,
          hashtags: ['ODEFoodHall', 'Booking', 'Dining']
        };
      default:
        return {
          text: 'üçΩÔ∏è –û—Ç–ª–∏—á–Ω—ã–π –æ–ø—ã—Ç –≤ ODE Food Hall!',
          url: baseUrl,
          hashtags: ['ODEFoodHall']
        };
    }
  };

  return {
    posts,
    loading,
    createPost,
    likePost,
    shareAchievement,
    generateShareableContent,
    refreshFeed: loadSocialFeed
  };
};