import { useEffect, useCallback } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export const useAuthSecurity = () => {
  const { user, session, signOut } = useAuth();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const isSessionExpired = useCallback(() => {
    if (!session?.expires_at) return false;
    return Date.now() >= session.expires_at * 1000;
  }, [session]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º
  const refreshSessionIfNeeded = useCallback(async () => {
    if (!session) return;
    
    const expiresAt = session.expires_at;
    if (!expiresAt) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const refreshThreshold = expiresAt - 300; // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const currentTime = Math.floor(Date.now() / 1000);

    if (currentTime >= refreshThreshold) {
      try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
        const { error } = await supabase.auth.refreshSession();
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ');
          await signOut();
        } else {
          console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          toast.success('–°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
      } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        toast.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
        await signOut();
      }
    }
  }, [session, signOut]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    if (!user || !session) return;

    const interval = setInterval(() => {
      if (isSessionExpired()) {
        console.warn('‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
        toast.warning('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
        signOut();
        return;
      }

      refreshSessionIfNeeded();
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(interval);
  }, [user, session, isSessionExpired, refreshSessionIfNeeded, signOut]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const validateUserRole = useCallback(async (requiredRole: string = 'user') => {
    if (!user) {
      console.warn('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      const { data, error } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_id', user.id)
        .single();

      if (error || !data) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–æ–ª–∏:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π
      const roleHierarchy = { 'user': 0, 'moderator': 1, 'admin': 2 };
      const userRoleLevel = roleHierarchy[data.role as keyof typeof roleHierarchy] ?? -1;
      const requiredRoleLevel = roleHierarchy[requiredRole as keyof typeof roleHierarchy] ?? 999;

      const hasAccess = userRoleLevel >= requiredRoleLevel;
      
      if (!hasAccess) {
        console.warn(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${requiredRole}, –∏–º–µ–µ—Ç—Å—è ${data.role}`);
        toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
      }

      return hasAccess;
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–æ–ª–∏:', error);
      toast.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤');
      return false;
    }
  }, [user]);

  return {
    isSessionExpired,
    refreshSessionIfNeeded,
    validateUserRole,
    isAuthenticated: !!user && !!session && !isSessionExpired()
  };
};