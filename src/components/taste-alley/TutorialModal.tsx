
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { 
  ChevronLeft, 
  ChevronRight, 
  Play, 
  Trophy, 
  Star, 
  Smartphone,
  Users,
  Gift,
  MapPin,
  Target
} from "lucide-react";

interface TutorialStep {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  image?: string;
  tips: string[];
}

interface TutorialModalProps {
  isOpen: boolean;
  onClose: () => void;
  onComplete: () => void;
}

const TutorialModal = ({ isOpen, onClose, onComplete }: TutorialModalProps) => {
  const [currentStep, setCurrentStep] = useState(0);

  const tutorialSteps: TutorialStep[] = [
    {
      id: 'welcome',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taste Alley!',
      description: '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –≤–∫—É—Å–æ–≤—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.',
      icon: <Star className="h-8 w-8 text-amber-500" />,
      tips: [
        '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–∞',
        '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        '–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏'
      ]
    },
    {
      id: 'sectors',
      title: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ 4 —Å–µ–∫—Ç–æ—Ä–∞',
      description: '–ö–∞–∂–¥—ã–π —Å–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∫—É—Å–æ–≤—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.',
      icon: <MapPin className="h-8 w-8 text-emerald-500" />,
      tips: [
        'FERMENT üß™ - –ò—Å–∫—É—Å—Å—Ç–≤–æ —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏',
        'SMOKE üî• - –¢—Ä–∞–¥–∏—Ü–∏–∏ –∫–æ–ø—á–µ–Ω–∏—è',
        'SPICE üå∂Ô∏è - –ü—Ä—è–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã',
        'UMAMI üêü - –°–µ–∫—Ä–µ—Ç—ã –ø—è—Ç–æ–≥–æ –≤–∫—É—Å–∞'
      ]
    },
    {
      id: 'progress',
      title: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å',
      description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏, —É—Ä–æ–≤–Ω–µ–º –∏ –ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤.',
      icon: <Target className="h-8 w-8 text-blue-500" />,
      tips: [
        '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤',
        '–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –æ—Å–æ–±—ã–µ —É—Å–ø–µ—Ö–∏'
      ]
    },
    {
      id: 'achievements',
      title: '–°–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –∑–Ω–∞—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.',
      icon: <Trophy className="h-8 w-8 text-purple-500" />,
      tips: [
        '–†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
        '–†–µ–¥–∫–∏–µ –∏ —ç–ø–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã',
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
      ]
    },
    {
      id: 'rewards',
      title: '–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã',
      description: '–û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –∏ —Å–∫–∏–¥–∫–∏.',
      icon: <Gift className="h-8 w-8 text-pink-500" />,
      tips: [
        '–°–∫–∏–¥–∫–∏ –Ω–∞ –µ–¥—É –∏ –Ω–∞–ø–∏—Ç–∫–∏',
        '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        '–§–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã'
      ]
    },
    {
      id: 'social',
      title: '–î–µ–ª–∏—Ç–µ—Å—å —É—Å–ø–µ—Ö–∞–º–∏',
      description: '–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π.',
      icon: <Users className="h-8 w-8 text-orange-500" />,
      tips: [
        '–î–µ–ª–∏—Ç–µ—Å—å –≤ Instagram, Facebook, Twitter',
        '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–∞–º',
        '–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏'
      ]
    },
    {
      id: 'nfc',
      title: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NFC',
      description: '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ NFC-–º–µ—Ç–∫–∏ –≤ —Å–µ–∫—Ç–æ—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
      icon: <Smartphone className="h-8 w-8 text-green-500" />,
      tips: [
        '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ NFC-–º–µ—Ç–∫–µ',
        '–ü–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—á–∫–∏',
        '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'
      ]
    }
  ];

  const nextStep = () => {
    if (currentStep < tutorialSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const completeTutorial = () => {
    onComplete();
    onClose();
  };

  const currentStepData = tutorialSteps[currentStep];

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Play className="h-5 w-5 text-emerald-600" />
            –û–±—É—á–µ–Ω–∏–µ Taste Alley
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / tutorialSteps.length) * 100}%` }}
            />
          </div>

          {/* Step Counter */}
          <div className="text-center text-sm text-muted-foreground">
            –®–∞–≥ {currentStep + 1} –∏–∑ {tutorialSteps.length}
          </div>

          {/* Step Content */}
          <Card className="border-2 border-emerald-200 bg-gradient-to-br from-emerald-50 to-teal-50">
            <CardContent className="p-6">
              <div className="text-center space-y-4">
                <div className="flex justify-center">
                  {currentStepData.icon}
                </div>
                
                <h3 className="text-xl font-bold text-emerald-800">
                  {currentStepData.title}
                </h3>
                
                <p className="text-muted-foreground leading-relaxed">
                  {currentStepData.description}
                </p>

                {/* Tips */}
                <div className="space-y-2">
                  {currentStepData.tips.map((tip, index) => (
                    <div key={index} className="flex items-center gap-2 text-sm">
                      <div className="w-2 h-2 bg-emerald-500 rounded-full" />
                      <span>{tip}</span>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Navigation */}
          <div className="flex justify-between items-center">
            <Button 
              variant="outline" 
              onClick={prevStep}
              disabled={currentStep === 0}
            >
              <ChevronLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>

            <div className="flex gap-2">
              {tutorialSteps.map((_, index) => (
                <div
                  key={index}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    index === currentStep 
                      ? 'bg-emerald-600' 
                      : index < currentStep 
                        ? 'bg-emerald-300' 
                        : 'bg-gray-300'
                  }`}
                />
              ))}
            </div>

            {currentStep === tutorialSteps.length - 1 ? (
              <Button 
                onClick={completeTutorial}
                className="bg-emerald-600 hover:bg-emerald-700"
              >
                –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç!
                <Play className="h-4 w-4 ml-2" />
              </Button>
            ) : (
              <Button 
                onClick={nextStep}
                className="bg-emerald-600 hover:bg-emerald-700"
              >
                –î–∞–ª–µ–µ
                <ChevronRight className="h-4 w-4 ml-2" />
              </Button>
            )}
          </div>

          {/* Skip Button */}
          <div className="text-center">
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => {
                onComplete();
                onClose();
              }}
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default TutorialModal;
