import { useEffect, useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useLoyalty } from '@/hooks/useLoyalty';
import { useSocialFeatures } from '@/hooks/useSocialFeatures';
import { useNotifications } from '@/hooks/useNotifications';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Badge, Trophy, Star, Gift, Users } from 'lucide-react';

interface CrossSystemEvent {
  type:
    | 'loyalty_upgrade'
    | 'achievement_unlocked'
    | 'social_milestone'
    | 'special_offer'
    | 'quest_completed';
  title: string;
  message: string;
  data?: any;
  priority: 'low' | 'medium' | 'high';
}

export const CrossSystemNotifications = () => {
  const { user } = useAuth();
  const { loyaltyData } = useLoyalty();
  const { posts } = useSocialFeatures();
  const { notifications, markAsRead } = useNotifications();
  const { toast } = useToast();
  const [processedEvents, setProcessedEvents] = useState<Set<string>>(
    new Set()
  );

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  useEffect(() => {
    if (loyaltyData && user) {
      const eventKey = `loyalty_${loyaltyData.tier}_${loyaltyData.points}`;

      if (!processedEvents.has(eventKey) && loyaltyData.tier !== 'bronze') {
        const event: CrossSystemEvent = {
          type: 'loyalty_upgrade',
          title: 'üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!',
          message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${getTierName(loyaltyData.tier)}`,
          data: { tier: loyaltyData.tier, points: loyaltyData.points },
          priority: 'high',
        };

        handleCrossSystemEvent(event);
        setProcessedEvents((prev) => new Set([...prev, eventKey]));
      }
    }
  }, [loyaltyData, user, processedEvents]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  useEffect(() => {
    if (posts && user && posts.length > 0) {
      const eventKey = `social_posts_${posts.length}`;

      if (!processedEvents.has(eventKey) && posts.length >= 5) {
        const event: CrossSystemEvent = {
          type: 'social_milestone',
          title: '‚≠ê –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
          message: `–í—ã —Å–æ–∑–¥–∞–ª–∏ ${posts.length} –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!`,
          data: { posts_count: posts.length },
          priority: 'medium',
        };

        handleCrossSystemEvent(event);
        setProcessedEvents((prev) => new Set([...prev, eventKey]));
      }
    }
  }, [posts, user, processedEvents]);

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–ª–æ—è–ª—å–Ω–æ—Å—Ç—å + —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
  useEffect(() => {
    if (loyaltyData && posts && user) {
      // VIP + –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–∏—Å—Ç = –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      if (loyaltyData.tier === 'platinum' && posts.length >= 5) {
        const eventKey = `vip_social_leader`;

        if (!processedEvents.has(eventKey)) {
          const event: CrossSystemEvent = {
            type: 'special_offer',
            title: 'üëë –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
            message:
              "–ö–∞–∫ VIP-–≥–æ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É Chef's Table!",
            data: {
              offer_type: 'private_chefs_table',
              valid_until: new Date(
                Date.now() + 7 * 24 * 60 * 60 * 1000
              ).toISOString(),
            },
            priority: 'high',
          };

          handleCrossSystemEvent(event);
          setProcessedEvents((prev) => new Set([...prev, eventKey]));
        }
      }

      // –ú–Ω–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö = Reward
      if (loyaltyData.visits >= 10 && posts.length >= 5) {
        const eventKey = `frequent_social_visitor`;

        if (!processedEvents.has(eventKey)) {
          const event: CrossSystemEvent = {
            type: 'achievement_unlocked',
            title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
            message: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä ODE" –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!',
            data: {
              achievement: 'ode_ambassador',
              rewards: ['free_wine_tasting', 'priority_booking'],
            },
            priority: 'medium',
          };

          handleCrossSystemEvent(event);
          setProcessedEvents((prev) => new Set([...prev, eventKey]));
        }
      }
    }
  }, [loyaltyData, posts, user, processedEvents]);

  // Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!user) return;

    const channel = supabase
      .channel('cross-system-notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'user_notifications',
          filter: `user_id=eq.${user.id}`,
        },
        (payload) => {
          const notification = payload.new;
          if (notification.type === 'cross_system') {
            handleRealtimeNotification(notification);
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user]);

  const handleCrossSystemEvent = async (event: CrossSystemEvent) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const icon = getEventIcon(event.type);

    toast({
      title: event.title,
      description: event.message,
      duration: event.priority === 'high' ? 8000 : 5000,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    if (user) {
      try {
        await supabase.from('user_notifications').insert({
          user_id: user.id,
          type: 'cross_system',
          title: event.title,
          message: event.message,
          data: event.data,
        });
      } catch (error) {
        console.error('Error saving cross-system notification:', error);
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    triggerEventActions(event);
  };

  const handleRealtimeNotification = (notification: any) => {
    const icon = getEventIcon(
      notification.data?.type || 'achievement_unlocked'
    );

    toast({
      title: notification.title,
      description: notification.message,
      duration: 6000,
    });
  };

  const triggerEventActions = (event: CrossSystemEvent) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
    switch (event.type) {
      case 'loyalty_upgrade':
        // –ú–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.dispatchEvent(
          new CustomEvent('loyaltyUpgrade', {
            detail: event.data,
          })
        );
        break;

      case 'social_milestone':
        // –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        window.dispatchEvent(
          new CustomEvent('socialMilestone', {
            detail: event.data,
          })
        );
        break;

      case 'special_offer':
        // –ú–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ A/B —Ç–µ—Å—Ç—ã
        window.dispatchEvent(
          new CustomEvent('specialOffer', {
            detail: event.data,
          })
        );
        break;
    }
  };

  return null;
};

const getEventIcon = (type: string) => {
  switch (type) {
    case 'loyalty_upgrade':
      return Trophy;
    case 'achievement_unlocked':
      return Badge;
    case 'social_milestone':
      return Users;
    case 'special_offer':
      return Gift;
    case 'quest_completed':
      return Star;
    default:
      return Badge;
  }
};

const getTierName = (tier: string): string => {
  const names: Record<string, string> = {
    bronze: '–ë—Ä–æ–Ω–∑–æ–≤—ã–π',
    silver: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
    gold: '–ó–æ–ª–æ—Ç–æ–π',
    platinum: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π',
  };
  return names[tier] || tier;
};
