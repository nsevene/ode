import { useState, useCallback } from 'react';
import { signDeepLink, verifyDeepLink } from '@/lib/jwt';
import { toast } from 'sonner';

interface JWTPayload {
  zone?: string;
  guest_id?: string;
  source?: string;
  exp?: number;
  iat?: number;
}

export const useSecureJWT = () => {
  const [isLoading, setIsLoading] = useState(false);

  const signToken = useCallback(async (payload: Record<string, any>) => {
    setIsLoading(true);
    try {
      const token = await signDeepLink(payload);
      console.log('üîê –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω');
      toast.success('–ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
      return token;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const verifyToken = useCallback(async (token: string) => {
    setIsLoading(true);
    try {
      const result = await verifyDeepLink(token);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const payload = result.payload as JWTPayload;
      if (payload.exp && Date.now() >= payload.exp * 1000) {
        toast.error('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫');
        throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      }

      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω');
      toast.success('–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      toast.error('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const isTokenExpired = useCallback((token: string): boolean => {
    try {
      // –ë–∞–∑–æ–≤–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const parts = token.split('.');
      if (parts.length !== 3) return true;

      const payload = JSON.parse(atob(parts[1])) as JWTPayload;
      return payload.exp ? Date.now() >= payload.exp * 1000 : false;
    } catch {
      return true; // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–º
    }
  }, []);

  return {
    signToken,
    verifyToken,
    isTokenExpired,
    isLoading,
  };
};
