import { useState, useEffect, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';

interface NFCSector {
  id: string;
  name: string;
  description: string;
  nfcTag: string;
  isActive: boolean;
  visitCount: number;
  coordinates?: {
    lat: number;
    lng: number;
  };
}

interface NFCReading {
  serialNumber?: string;
  message?: any;
  sector?: string;
  timestamp: string;
}

interface NFCStatus {
  isSupported: boolean;
  isEnabled: boolean;
  isScanning: boolean;
  error: string | null;
}

export const useNFCEnhanced = () => {
  const [nfcStatus, setNfcStatus] = useState<NFCStatus>({
    isSupported: false,
    isEnabled: false,
    isScanning: false,
    error: null,
  });

  const [passportData, setPassportData] = useState<any>(null);
  const [recentReadings, setRecentReadings] = useState<NFCReading[]>([]);
  const [sectors, setSectors] = useState<NFCSector[]>([]);
  const [userProgress, setUserProgress] = useState<any>(null);

  const { toast } = useToast();
  const { user } = useAuth();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NFC
  const checkNFCSupport = useCallback(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web NFC API
      if ('NDEFReader' in window) {
        setNfcStatus((prev) => ({ ...prev, isSupported: true }));

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å NFC
        const ndef = new (window as any).NDEFReader();
        await ndef.scan();
        setNfcStatus((prev) => ({ ...prev, isEnabled: true }));

        return true;
      } else {
        setNfcStatus((prev) => ({
          ...prev,
          isSupported: false,
          error: 'NFC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
        }));
        return false;
      }
    } catch (error: any) {
      setNfcStatus((prev) => ({
        ...prev,
        isEnabled: false,
        error: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NFC: ${error.message}`,
      }));
      return false;
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadSectors = useCallback(async () => {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      const mockSectors: NFCSector[] = [
        {
          id: '1',
          name: 'Spicy Asia',
          description: 'Thai & Vietnamese flavors',
          nfcTag: 'spicy-asia-001',
          isActive: true,
          visitCount: 0,
          coordinates: { lat: 55.7558, lng: 37.6176 },
        },
        {
          id: '2',
          name: 'Wild Bali',
          description: 'Authentic Balinese cuisine',
          nfcTag: 'wild-bali-002',
          isActive: true,
          visitCount: 0,
          coordinates: { lat: 55.7558, lng: 37.6176 },
        },
        {
          id: '3',
          name: 'Dolce Italia',
          description: 'Sicilian & Tuscan specialties',
          nfcTag: 'dolce-italia-003',
          isActive: true,
          visitCount: 0,
          coordinates: { lat: 55.7558, lng: 37.6176 },
        },
        {
          id: '4',
          name: 'Fresh Nordic',
          description: 'Scandinavian flavors',
          nfcTag: 'fresh-nordic-004',
          isActive: true,
          visitCount: 0,
          coordinates: { lat: 55.7558, lng: 37.6176 },
        },
      ];

      setSectors(mockSectors);
    } catch (error) {
      console.error('Error loading sectors:', error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserProgress = useCallback(async () => {
    if (!user) return;

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      const mockProgress = {
        userId: user.id,
        totalSectors: 8,
        completedSectors: 3,
        totalPoints: 450,
        level: 2,
        achievements: [
          {
            id: '1',
            name: 'First Visit',
            description: '–ü–æ—Å–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π —Å–µ–∫—Ç–æ—Ä',
            unlocked: true,
          },
          {
            id: '2',
            name: 'Spice Master',
            description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ Spicy Asia',
            unlocked: true,
          },
        ],
      };

      setUserProgress(mockProgress);
    } catch (error) {
      console.error('Error loading user progress:', error);
    }
  }, [user]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ NFC —á—Ç–µ–Ω–∏—è
  const handleNFCRead = useCallback(
    (event: any) => {
      const { message, serialNumber } = event;
      const timestamp = new Date().toISOString();

      console.log('NFC Tag detected:', serialNumber);

      let sectorData = null;
      let sectorName = 'Unknown Sector';

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ NFC —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message && message.records) {
        for (const record of message.records) {
          if (record.recordType === 'text') {
            try {
              const decoder = new TextDecoder();
              const text = decoder.decode(record.data);

              // –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ NFC –º–µ—Ç–∫–∏
              if (text.startsWith('{')) {
                sectorData = JSON.parse(text);
                sectorName = sectorData.sector || 'Unknown';
              } else if (text.includes('sector:')) {
                sectorName = text.split('sector:')[1];
                sectorData = {
                  type: 'taste_sector',
                  sector: sectorName,
                  id: serialNumber,
                };
              }
            } catch (e) {
              console.error('Error parsing NFC data:', e);
            }
          }
        }
      }

      const nfcReading: NFCReading = {
        serialNumber,
        message: sectorData,
        sector: sectorName,
        timestamp,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á—Ç–µ–Ω–∏–π
      setRecentReadings((prev) => [nfcReading, ...prev.slice(0, 9)]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        updateUserProgress(sectorName, sectorData);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast({
        title: 'üéØ NFC –º–µ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!',
        description: `–°–µ–∫—Ç–æ—Ä: ${sectorName}`,
      });
    },
    [user, toast]
  );

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserProgress = useCallback(
    async (sectorName: string, sectorData: any) => {
      if (!user) return;

      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        console.log('Updating user progress for sector:', sectorName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUserProgress((prev) => {
          if (!prev) return prev;

          const newProgress = { ...prev };
          newProgress.completedSectors = Math.min(
            newProgress.completedSectors + 1,
            newProgress.totalSectors
          );
          newProgress.totalPoints += 50; // –ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞

          return newProgress;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements(sectorName);
      } catch (error) {
        console.error('Error updating user progress:', error);
      }
    },
    [user]
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const checkAchievements = useCallback(
    async (sectorName: string) => {
      if (!user) return;

      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const newAchievements = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (userProgress?.completedSectors === 1) {
          newAchievements.push({
            id: 'first_sector',
            name: 'First Steps',
            description: '–ü–æ—Å–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π —Å–µ–∫—Ç–æ—Ä Taste Compass',
          });
        }

        if (userProgress?.completedSectors === 8) {
          newAchievements.push({
            id: 'compass_master',
            name: 'Compass Master',
            description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Å–µ–∫—Ç–æ—Ä—ã Taste Compass!',
          });
        }

        if (newAchievements.length > 0) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
          newAchievements.forEach((achievement) => {
            toast({
              title: 'üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
              description: achievement.description,
            });
          });
        }
      } catch (error) {
        console.error('Error checking achievements:', error);
      }
    },
    [user, userProgress, toast]
  );

  // –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è NFC
  const startNFCScanning = useCallback(async () => {
    if (!nfcStatus.isSupported) {
      toast({
        title: 'NFC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
        description: '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç NFC',
        variant: 'destructive',
      });
      return false;
    }

    try {
      const ndef = new (window as any).NDEFReader();

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      ndef.addEventListener('reading', handleNFCRead);
      ndef.addEventListener('readingerror', (event: any) => {
        console.error('NFC reading error:', event);
        setNfcStatus((prev) => ({ ...prev, error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è NFC' }));
      });

      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await ndef.scan();
      setNfcStatus((prev) => ({ ...prev, isScanning: true, error: null }));

      toast({
        title: 'NFC —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
        description: '–ü–æ–¥–Ω–µ—Å–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ NFC –º–µ—Ç–∫–µ',
      });

      return true;
    } catch (error: any) {
      setNfcStatus((prev) => ({
        ...prev,
        isScanning: false,
        error: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NFC: ${error.message}`,
      }));

      toast({
        title: '–û—à–∏–±–∫–∞ NFC',
        description: error.message,
        variant: 'destructive',
      });

      return false;
    }
  }, [nfcStatus.isSupported, handleNFCRead, toast]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è NFC
  const stopNFCScanning = useCallback(() => {
    setNfcStatus((prev) => ({ ...prev, isScanning: false }));

    toast({
      title: 'NFC —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
      description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ NFC –º–µ—Ç–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    });
  }, [toast]);

  // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ NFC –º–µ—Ç–∫—É
  const writeNFC = useCallback(
    async (data: any) => {
      if (!nfcStatus.isSupported) {
        toast({
          title: 'NFC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
          description: '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å NFC',
          variant: 'destructive',
        });
        return false;
      }

      try {
        const ndef = new (window as any).NDEFReader();
        const message = {
          records: [
            {
              recordType: 'text',
              data: JSON.stringify(data),
            },
          ],
        };

        await ndef.write(message);

        toast({
          title: 'NFC –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞',
          description: '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ NFC –º–µ—Ç–∫—É',
        });

        return true;
      } catch (error: any) {
        toast({
          title: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ NFC',
          description: error.message,
          variant: 'destructive',
        });
        return false;
      }
    },
    [nfcStatus.isSupported, toast]
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    checkNFCSupport();
    loadSectors();
    loadUserProgress();
  }, [checkNFCSupport, loadSectors, loadUserProgress]);

  return {
    // –°—Ç–∞—Ç—É—Å NFC
    nfcStatus,

    // –î–∞–Ω–Ω—ã–µ
    passportData,
    recentReadings,
    sectors,
    userProgress,

    // –ú–µ—Ç–æ–¥—ã
    startNFCScanning,
    stopNFCScanning,
    writeNFC,
    loadUserProgress,

    // –£—Ç–∏–ª–∏—Ç—ã
    checkNFCSupport,
  };
};
